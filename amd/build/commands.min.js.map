{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Common values helper for the Moodle tiny_ketcher plugin.\n *\n * @module      tiny_ketcher/commands\n * @copyright   2024 Venkatesan Rangarajan <venkatesanrpu@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    getButtonImage\n}\nfrom 'editor_tiny/utils';\nimport {\n    get_string as getString\n}\nfrom 'core/str';\nimport {\n    component,\n    ketcherButtonName,\n    icon,\n}\nfrom './common';\nimport {\n    KetcherEmbed\n}\nfrom './embed';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst handleAction = (editor) => {\n    const ketcherImage = new KetcherEmbed(editor);\n    ketcherImage.init();\n};\n\nexport const getSetup = async() => {\n    const isImage = (node) => node.nodeName.toLowerCase() === 'img';\n\n    const [\n        ketcherButtonNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n                getString('ketcherButtonNameTitle', component),\n                getString('ketcherButtonNameTitle', component),\n                getButtonImage('icon', component),\n            ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the startdemo Toolbar Button.\n        editor.ui.registry.addButton(ketcherButtonName, {\n            icon,\n            tooltip: ketcherButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        editor.ui.registry.addToggleButton(ketcherButtonName, {\n            icon,\n            tooltip: ketcherButtonNameTitle,\n            onAction: () => handleAction(editor, window.json),\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'img:not([data-mce-object]):not([data-mce-placeholder]),figure.image',\n                    function () {\n                    var node = editor.selection.getNode();\n                    var parentNode = node.parentNode;\n                    const html = editor.serializer.serialize(parentNode);\n                    const commentMatch = html.match(/<!--(.*?)-->/);\n                    if (commentMatch) {\n                        try {\n                            var json = JSON.parse(commentMatch[1]);\n                            // If the comment contains valid JSON, call api.setActive and store the JSON\n                            api.setActive(true);\n                            window.json = JSON.stringify(json); // Save the JSON to window.json\n                        } catch (e) {\n                            // If the comment does not contain valid JSON, call api.setActive with false\n                            api.setActive(false);\n                        }\n                    } else {\n                        api.setActive(false);\n                    }\n                }).unbind;\n            }\n        });\n\n        editor.ui.registry.addContextToolbar(ketcherButtonName, {\n            predicate: isImage,\n            items: ketcherButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n\n        // Add the startdemo Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(ketcherButtonName, {\n            icon,\n            text: ketcherButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n    };\n};\n"],"names":["handleAction","editor","KetcherEmbed","init","async","isImage","node","nodeName","toLowerCase","ketcherButtonNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","ketcherButtonName","tooltip","onAction","addToggleButton","window","json","onSetup","api","selection","selectorChangedWithUnbind","parentNode","getNode","commentMatch","serializer","serialize","match","JSON","parse","setActive","stringify","e","unbind","addContextToolbar","predicate","items","position","scope","addMenuItem","text"],"mappings":";;;;;;;;MA+CMA,aAAgBC,SACG,IAAIC,oBAAaD,QACzBE,0BAGOC,gBACdC,QAAWC,MAAyC,QAAhCA,KAAKC,SAASC,eAGpCC,uBACAC,mBACMC,QAAQC,IAAI,EACV,mBAAU,yBAA0BC,oBACpC,mBAAU,yBAA0BA,oBACpC,yBAAe,OAAQA,4BAG3BZ,SAEJA,OAAOa,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CjB,OAAOa,GAAGC,SAASI,UAAUC,0BAAmB,CAC5CH,KAAAA,aACAI,QAASZ,uBACTa,SAAU,IAAMtB,aAAaC,UAGjCA,OAAOa,GAAGC,SAASQ,gBAAgBH,0BAAmB,CAClDH,KAAAA,aACAI,QAASZ,uBACTa,SAAU,IAAMtB,aAAaC,OAAQuB,OAAOC,MAC5CC,QAASC,KACE1B,OAAO2B,UAAUC,0BACpB,uEACA,eAEIC,WADO7B,OAAO2B,UAAUG,UACND,iBAEhBE,aADO/B,OAAOgC,WAAWC,UAAUJ,YACfK,MAAM,mBAC5BH,qBAEQP,KAAOW,KAAKC,MAAML,aAAa,IAEnCL,IAAIW,WAAU,GACdd,OAAOC,KAAOW,KAAKG,UAAUd,MAC/B,MAAOe,GAELb,IAAIW,WAAU,QAGlBX,IAAIW,WAAU,MAEnBG,SAIXxC,OAAOa,GAAGC,SAAS2B,kBAAkBtB,0BAAmB,CACpDuB,UAAWtC,QACXuC,MAAOxB,0BACPyB,SAAU,OACVC,MAAO,SAKX7C,OAAOa,GAAGC,SAASgC,YAAY3B,0BAAmB,CAC9CH,KAAAA,aACA+B,KAAMvC,uBACNa,SAAU,IAAMtB,aAAaC"}