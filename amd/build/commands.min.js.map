{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Common values helper for the Moodle tiny_ketcher plugin.\n *\n * @module      tiny_ketcher/commands\n * @copyright   2024 Venkatesan Rangarajan <venkatesanrpu@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    getButtonImage\n}\nfrom 'editor_tiny/utils';\nimport {\n    get_string as getString\n}\nfrom 'core/str';\nimport {\n    component,\n    ketcherButtonName,\n    ketcherMenuName,\n    icon,\n}\nfrom './common';\nimport {\n    KetcherEmbed\n}\nfrom './embed';\n\n// Function to find the hidden JSON data after the selected image\nconst findNextKetData = (editor) => {\n    const selectedNode = editor.selection.getNode();\n    let sibling = selectedNode.nextSibling;\n    while (sibling && sibling.nodeType !== 8) { // Node.COMMENT_NODE === 8\n        if (sibling.nodeName === 'BR') {\n            sibling = sibling.nextSibling; // Move to the next sibling after <br>\n            while (sibling && sibling.nodeType !== 8) { // Node.COMMENT_NODE === 8\n                sibling = sibling.nextSibling;\n            }\n            if (sibling) {\n                const data = JSON.parse(sibling.nodeValue);\n                sibling.parentNode.removeChild(sibling); // Remove the sibling\n                return data;\n            }\n        }\n        sibling = sibling.nextSibling;\n    }\n    if (sibling) {\n        return JSON.parse(sibling.nodeValue);\n    }\n    return null;\n};\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst handleAction = (editor) => {\n    const ketcherImage = new KetcherEmbed(editor);\n    ketcherImage.init();\n};\n\n\nexport const getSetup = async() => {\n    const [\n        ketcherButtonNameTitle,\n        ketcherMenuNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n                getString('ketcherButtonNameTitle', component),\n                getString('ketcherMenuNameTitle', component),\n                getButtonImage('icon', component),\n            ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the startdemo Toolbar Button.\n        editor.ui.registry.addButton(ketcherButtonName, {\n            icon,\n            tooltip: ketcherButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        editor.ui.registry.addToggleButton(ketcherButtonName, {\n            icon,\n            tooltip: ketcherButtonNameTitle,\n            onAction: () => handleAction(editor),\n            onSetup: (buttonApi) => {\n                editor.on('NodeChange', () => {\n                    const selectedNode = editor.selection.getNode();\n                    if (selectedNode.nodeName === 'IMG') {\n                        var tempData = findNextKetData(editor);\n                        window.ketData = JSON.stringify(tempData);\n                        if (tempData) {\n                            buttonApi.setActive(true);\n                        } else {\n                            buttonApi.setActive(false);\n                        }\n                    } else {\n                        buttonApi.setActive(false);\n                    }\n                });\n                return () => {\n                    editor.off('NodeChange');\n                };\n            },\n        });\n\n        // Add the startdemo Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(ketcherMenuName, {\n            icon,\n            text: ketcherMenuNameTitle,\n            onAction: () => handleAction(editor),\n        });\n    };\n};\n\n"],"names":["handleAction","editor","KetcherEmbed","init","async","ketcherButtonNameTitle","ketcherMenuNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","ketcherButtonName","tooltip","onAction","addToggleButton","onSetup","buttonApi","on","selection","getNode","nodeName","tempData","sibling","nextSibling","nodeType","data","JSON","parse","nodeValue","parentNode","removeChild","findNextKetData","window","ketData","stringify","setActive","off","addMenuItem","ketcherMenuName","text"],"mappings":";;;;;;;;MAwEMA,aAAgBC,SACG,IAAIC,oBAAaD,QACzBE,0BAIOC,gBAEhBC,uBACAC,qBACAC,mBACMC,QAAQC,IAAI,EACV,mBAAU,yBAA0BC,oBACpC,mBAAU,uBAAwBA,oBAClC,yBAAe,OAAQA,4BAG3BT,SAEJA,OAAOU,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7Cd,OAAOU,GAAGC,SAASI,UAAUC,0BAAmB,CAC5CH,KAAAA,aACAI,QAASb,uBACTc,SAAU,IAAMnB,aAAaC,UAGjCA,OAAOU,GAAGC,SAASQ,gBAAgBH,0BAAmB,CAClDH,KAAAA,aACAI,QAASb,uBACTc,SAAU,IAAMnB,aAAaC,QAC7BoB,QAAUC,YACNrB,OAAOsB,GAAG,cAAc,QAEU,QADTtB,OAAOuB,UAAUC,UACrBC,SAAoB,KAC7BC,SAhEH1B,CAAAA,aAEjB2B,QADiB3B,OAAOuB,UAAUC,UACXI,iBACpBD,SAAgC,IAArBA,QAAQE,UAAgB,IACb,OAArBF,QAAQF,SAAmB,KAC3BE,QAAUA,QAAQC,YACXD,SAAgC,IAArBA,QAAQE,UACtBF,QAAUA,QAAQC,eAElBD,QAAS,OACHG,KAAOC,KAAKC,MAAML,QAAQM,kBAChCN,QAAQO,WAAWC,YAAYR,SACxBG,MAGfH,QAAUA,QAAQC,mBAElBD,QACOI,KAAKC,MAAML,QAAQM,WAEvB,MA4C4BG,CAAgBpC,QAC/BqC,OAAOC,QAAUP,KAAKQ,UAAUb,UAC5BA,SACAL,UAAUmB,WAAU,GAEpBnB,UAAUmB,WAAU,QAGxBnB,UAAUmB,WAAU,MAGrB,KACHxC,OAAOyC,IAAI,kBAOvBzC,OAAOU,GAAGC,SAAS+B,YAAYC,wBAAiB,CAC5C9B,KAAAA,aACA+B,KAAMvC,qBACNa,SAAU,IAAMnB,aAAaC"}